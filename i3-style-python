#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Author Jan LÃ¶ser <jan.loeser@posteo.de>
# Published under the GNU Public Licence 2
import argparse
from collections import defaultdict
import sys
import os
import datetime
import fileinput
import re
import shutil
try:
    import yaml
except ImportError:
    sys.stderr.write("'PyYAML' package needed. Try 'pip3 install PyYAML.'\n")
    sys.exit(1)

__AUTHOR__ = "jan.loeser@posteo.de"
__NAME__ = "i3-style-python"
__VERSION__ = "1.1"

# Use the following string as fallback if e.g. 'child_border' key/value is not
# set in the theme file. This could also be set to a valid hexadecimal color
# code (e.g. '#ff0000') but may influence the appearance.
color_fallback=''

class Theme(object):

    def __init__(self, yaml):
        self._description = yaml["meta"]["description"]
        self._yaml = yaml
        self._window_substitutions = None
        self._bar_substitutions = None

        # search for color definitions and replace them
        if 'colors' in yaml.keys():
            self._col_values = yaml['colors']
            self._replace_colors(yaml)

    def _replace_colors(self, d):
        for key in d.keys():
            if isinstance(d[key], dict) and d[key].keys():
                self._replace_colors(d[key])
            if isinstance(d[key], str):
                if d[key] in self._col_values.keys():
                    d[key] = self._col_values[d[key]]

    @property
    def description(self):
        return self._description

    @property
    def substitutions(self):
        result = self.window_substitutions().copy()
        result.update(self.bar_substitutions())
        return result

    def window_substitutions(self):
        if self._window_substitutions:
            return self._window_substitutions

        result = {}
        template = "client.%(state)-16s %(border)s %(background)s %(text)s %(indicator)s %(child_border)s"
        for state in self._yaml['window_colors']:
            _dict = defaultdict(lambda: color_fallback,
                    {'state': state, **self._yaml['window_colors'][state]})
            result['client.' + state] = (template % _dict).rstrip()
        self._window_substitutions = result
        return result

    def bar_substitutions(self):
        if self._bar_substitutions:
            return self._bar_substitutions

        result = {}
        template = "%(state)-18s %(border)s %(background)s %(text)s"
        for state in self._yaml['bar_colors']:
            if isinstance(self._yaml['bar_colors'][state], dict):
                self._yaml['bar_colors'][state].update({'state': state})
                result[state] = template % self._yaml['bar_colors'][state]
            else:
                result[state] = '%-18s %s' % (state, self._yaml['bar_colors'][state])
        self._bar_substitutions = result
        return result


def configure_xmenu(line, substitutions):
    backup = line
    try:
        line = line.split('exec')
        cmd = line[1].strip()
        wrap = ''
        if cmd[0] == cmd[-1] == '"':
            cmd = cmd.strip('"')
            wrap = '"'
        elif cmd[0] == cmd[-1] == '\'':
            cmd = cmd.strip('\'')
            wrap = '\''
        cmd = [x for x in re.split("( |\\\".*?\\\"|'.*?')", cmd) if x.strip()]
        exclude = ['-nf','-nb', '-sb', '-sf']
        cmd = [x for x in cmd if (x not in exclude) and (not x.startswith(('#','\'#','"#')))]
        wrapper = '"%s"' if wrap == '\'' else '\'%s\''
        cmd += ['-nf', wrapper % substitutions['client.unfocused'].split()[3]]
        cmd += ['-nb', wrapper % substitutions['client.unfocused'].split()[2]]
        cmd += ['-sf', wrapper % substitutions['client.focused'].split()[3]]
        cmd += ['-sb', wrapper % substitutions['client.focused'].split()[2]]
        return "%s exec %s%s%s\n" % (line[0].rstrip(), wrap, ' '.join(cmd), wrap)
    except:
        sys.stderr.write("Configuring Xmenu failed - no changes\n")
    return backup


def main(args):
    indentation =  args.indentation.replace('\\t', '\t')
    config_file = os.path.abspath(os.path.expanduser(args.config))
    theme_file = os.path.abspath(os.path.expanduser(args.theme))

    if not os.path.exists(config_file):
        sys.stderr.write("Couldn't find config file!\n")
        sys.exit(1)
    if not os.path.exists(theme_file):
        theme_file = './themes/' + args.theme
        if not os.path.exists(theme_file):
            sys.stderr.write("Couldn't find theme file!\n")
            sys.exit(1)

    try:
        fd_theme = open(theme_file, 'r')
        theme = Theme(yaml.safe_load(fd_theme))
    except IOError:
        sys.stderr.write("Can't read theme file!")
    finally:
        fd_theme.close()

    print("Applying \"%s\"" % theme.description)

    # create backup
    if not args.no_backup:
        prefix = datetime.datetime.now().strftime(".backup-%F_%X")
        shutil.copy(config_file, config_file + prefix)

    found = [[], []]
    # In order to match the correct substitution for 'inactive_workspace' and
    # 'active_workspace' (the latter would also match the fromer: 'inACTIVE')
    # we check if the precursor was eighter a whitespace, a tab or the start of
    # string/line. We do also look for the first '#' following the key which
    # very likely introducing the first hexacimal color code.
    regex = r'((?<=[ \t])|(?<=^))%s[ \t]+#.*$'
    for line in fileinput.input(config_file, inplace=True):
        if not line.lstrip().startswith('#'):
            if args.dmenu and re.match(r'^.*exec.*dmenu_run.*$', line):
                line = configure_xmenu(line, theme.substitutions)
                print(line, end='')
                continue

            if args.passmenu and re.match(r'^.*exec.*passmenu.*$', line):
                line = configure_xmenu(line, theme.substitutions)
                print(line, end='')
                continue

            for key, substitution in theme.substitutions.items():
                line, n = re.subn((regex % key), substitution, line)
                if n > 0:
                    if key.startswith('client.'):
                        found[0].append(key)
                    else:
                        found[1].append(key)
        print(line, end='')

    missing = [[], []]
    missing[0] = set(theme.window_substitutions()) - set(found[0])
    missing[1] = set(theme.bar_substitutions()) - set(found[1])

    if any(missing):
        print("Configuration added at the end of the file")
        with open(config_file, 'a') as f:
            f.write("\n# added by https://github.com/jloeser/i3-style-python/\n")

            substitutions = theme.window_substitutions()
            for key in missing[0]:
                f.write("%s\n" % substitutions[key])

            substitutions = theme.bar_substitutions()
            if missing[1]:
                f.write("bar {\n%(i)scolors {\n" % {'i': indentation})
                for key in missing[1]:
                    value = substitutions[key]
                    f.write("%(i)s%(i)s%(v)s\n" % {'i': indentation, 'v': value})
                f.write("%(i)s}\n}\n" % {'i': indentation})

    if args.reload:
        os.system('i3-msg reload > /dev/null 2>&1')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument('-h', '--help', action='help',
                    help="Show this help message and exit")

    parser.add_argument('-t', '--theme', required=True, metavar='FILENAME',
            help="Path to theme file")

    parser.add_argument('-r', '--reload', action='store_true',
            help="Apply theme and restart i3")

    parser.add_argument('-n', '--no-backup', action='store_true',
            help="Disable backup of i3 configuration file")

    parser.add_argument('-c', '--config', metavar='FILENAME',
            default='~/.i3/config',
            help="Path to i3 config file (default: ~/.i3/config)")

    parser.add_argument('-d', '--dmenu', action='store_true',
            default=False,
            help="Set colors also for dmenu_run command")

    parser.add_argument('-p', '--passmenu', action='store_true',
            default=False,
            help="Set colors also for passmenu command")

    parser.add_argument('--indentation', metavar='STRING',
            default=4*' ',
            help="Use specified indentation for newly added bar color \
                    configuration (e.g. '\\t'; default: 4*whitespace)")

    args = parser.parse_args()
    main(args)
else:
    sys.stderr.write("Can't be imported. Not a module!\n")
