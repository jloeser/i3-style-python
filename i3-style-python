#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Author Jan LÃ¶ser <jan.loeser@posteo.de>
# Published under the GNU Public Licence 2
import argparse
import sys
import os
import datetime
import fileinput
import re
import shutil
try:
    import yaml
except ImportError:
    sys.stderr.write("'PyYAML' package needed. Try 'pip3 install PyYAML.'\n")
    sys.exit(1)

__AUTHOR__ = "jan.loeser@posteo.de"
__NAME__ = "i3-style-python"
__VERSION__ = "1.0"


class Theme(object):

    def __init__(self, yaml):
        self._description = yaml["meta"]["description"]
        self._yaml = yaml
        self._replacements = None

        # search for color definitions and replace them
        if 'colors' in yaml.keys():
            self._col_values = yaml['colors']
            self._replace_colors(yaml)

    def _replace_colors(self, d):
        for key in d.keys():
            if isinstance(d[key], dict) and d[key].keys():
                self._replace_colors(d[key])
            if isinstance(d[key], str):
                if d[key] in self._col_values.keys():
                    d[key] = self._col_values[d[key]]

    @property
    def description(self):
        return self._description

    @property
    def replacements(self):
        if not self._replacements:
            result = self._window_colors().copy()
            result.update(self._bar_colors())
            self._replacements = result
        return self._replacements

    def _window_colors(self):
        result = {}
        window_colors_template = "client.%(state)-24s %(border)s %(background)s %(text)s %(indicator)s"
        for state in self._yaml['window_colors']:
            self._yaml['window_colors'][state].update({'state': state})
            result['client.' + state] = window_colors_template % self._yaml['window_colors'][state]
        return result

    def _bar_colors(self):
        result = {}
        bar_colors_template = "%(state)-24s %(border)s %(background)s %(text)s"
        for state in self._yaml['bar_colors']:
            if isinstance(self._yaml['bar_colors'][state], dict):
                self._yaml['bar_colors'][state].update({'state': state})
                result[state] = bar_colors_template % self._yaml['bar_colors'][state]
            else:
                result[state] = '%-24s %s ' % (state, self._yaml['bar_colors'][state])
        return result


def main(theme_file, reload=False, backup=True, config_file='~/.i3/config'):

    config_file = os.path.expanduser(config_file)

    if not os.path.exists(config_file):
        sys.stderr.write("Couldn't find config file!\n")
        sys.exit(1)
    if not os.path.exists(theme_file):
        theme_file = './themes/' + theme_file
        if not os.path.exists(theme_file):
            sys.stderr.write("Couldn't find theme file!\n")
            sys.exit(1)

    try:
        fd_theme = open(theme_file, 'r')
        theme = Theme(yaml.safe_load(fd_theme))
    except IOError:
        sys.stderr.write("Can't read theme file!")
    finally:
        fd_theme.close()

    print("\nFound: {}\n".format(theme.description))

    # create backup
    if backup:
        prefix = datetime.datetime.now().strftime(".backup-%F_%X")
        shutil.copy(config_file, config_file + prefix)

    search_regex = r"(^( )*%s[ (\t)](.)*?$)"
    for line in fileinput.input(config_file, inplace=True):
        for search, replace in theme.replacements.items():
            line = re.sub((search_regex % search), replace, line.rstrip())
        print(line)

    if reload:
        os.system('i3-msg reload > /dev/null 2>&1')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument('-h', '--help', action='help',
                    help="Show this help message and exit")

    parser.add_argument('-t', '--theme', required=True, metavar='FILENAME',
            help="Path to theme file")

    parser.add_argument('-r', '--reload', action='store_true',
            help="Apply theme and restart i3")

    parser.add_argument('-n', '--no-backup', action='store_true',
            help="Disable backup of i3 configuration file")

    parser.add_argument('-c', '--config', metavar='FILENAME',
            default='~/.i3/config',
            help="Path to i3 config file (default: ~/.i3/config)")

    args = parser.parse_args()
    main(args.theme, args.reload, not args.no_backup, args.config)
else:
    sys.stderr.write("Can't be imported. Not a module!\n")
